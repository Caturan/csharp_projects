# Ado.Net? 
- Ado.Net (ActiveX DataObjects.Net) olan, Microsoft'un bize sunduðu ver itabaný ile uygulamalarýmýz arasýnda köprü görevi gören bir veriye eriþim teknolojisidir. 
- Bu teknoloji ile verilerimizi listeyebilir, silebilir, güncelleyebilir veya yeni giriþi yapabiliriz. 

- CRUD --> Create Read Update Delete 

# SQL'de Stored Procedure Nedir? 
- Veritabanýnda CRUD gibi iþlemlerde, her seferinde kodu tekrar yazmamýz ve derlememiz gerekmektedir. 
- Durum böyle olunca hem zaman hem de derleme açýsýndan performans kaybý olmaktadýr. 
- Bu gibi durumlarda Stode Procedure(Saklý Yordam), programlama da kullanýlan ifadelere göre kod yazmamýzý saðlar. 

# Entity Framework Nedir? 
- Entity Framework ORM(Object Relational Mapping) araçlarýndan biridir. 
- ORM nedir: Ýliþkisel veritabaný ile nesneye yönelik proglamlama (OOP) arasýdan bir köprü görevi gören araçtýr. 
- Bu köprü, iliþkisel veritabanýndaki bilgilerimizi yönetmek için nesne modellerimizi kullandýðýmýz bir yapýdýr. 
- Entity Framework ile 4 farklý yöntem kullanarak proje geliþtirebilir: 
	- Model First (Yeni Veritabaný Oluþturma)
	- Database First (Var Olan Veritabanýný Kullanma)
	- Code First (Yeni Veritabaný Kod Yazarak)
	- Code First (Var Olan Veritabanýný Kullanma)
- Dezavantajlarý:	
	- Performans, Ado.Net gibi hýzlý bir performansý yoktur. 
	- Schema'da herhangi bir deðiþiklik yapýldýðý zaman EF çalýþmayacaktýr. Bu Schema'yý solution'da güncellememiz gerekmektedir. 
	- Veritabanýndan veri alýþveriþi yapýlacaðý zaman kontrol bizde deðil Entity Frameworktedir. 
- EF de tablolarda birincil anahtar oluþturmak önemli. 

# Code First Nedir?		
- Code First, Entity Framework'ün 4 farklý yönteminden biridir.
- Bu yöntemde veritabaný tasarýmýný kod yazarak yaparýz.
- Yani öncelikle sýnýflarýmýzý oluþtururuz ve bu sýnýflara göre veritabaný tasarýmýmýzý yaparýz.
- Code First yaklaþýmýnda, sýnýflarýmýzý oluþturduktan sonra Entity Framework, bu sýnýflara göre veritabaný tablolarýný otomatik olarak oluþturur.
- Code First yaklaþýmýnda, veritabaný þemasýný deðiþtirmek istediðimizde, sýnýflarýmýzda gerekli deðiþiklikleri yaparýz ve ardýndan Entity Framework, bu deðiþikliklere göre veritabanýný günceller.	
- Code First yaklaþýmýnda, veritabaný baðlantý bilgilerini genellikle uygulama yapýlandýrma dosyasýnda (app.config veya web.config) belirtiriz.	
- Code First yaklaþýmýnda, veritabaný iþlemlerini gerçekleþtirmek için DbContext sýnýfýný kullanýrýz. DbContext, veritabaný baðlantýsýný yönetir ve veritabaný iþlemlerini gerçekleþtirir.	 
- Avantajlarý:
	- Hýzlý geliþtirme süreci saðlar.
	- Kod tabanlý olduðu için sürüm kontrolü daha kolaydýr.
	- Veritabaný þemasýný kodla yönetmek daha esnektir.	
- Dezavantajlarý:	
	- Büyük ve karmaþýk veritabanlarý için yönetimi zor olabilir.
	- Performans, Ado.Net gibi hýzlý bir performansý yoktur.
	- Veritabaný þemasýnda yapýlan deðiþiklikler manuel olarak takip edilmelidir.

- Örnek Kullaným:
```csharp
public class Product
{
	public int Id { get; set; }
	public string Name { get; set; }
	public decimal Price { get; set; }
}	
public class AppDbContext : DbContext
{
	public DbSet<Product> Products { get; set; }
}
// Veritabaný iþlemleri	
using (var context = new AppDbContext())
{
	// Yeni ürün ekleme
	var product = new Product { Name = "Laptop", Price = 1500.00m };
	context.Products.Add(product);
	context.SaveChanges();
	// Ürünleri listeleme
	var products = context.Products.ToList();
}
```

# Dapper nedir? 
- Dapper, .NET platformu için geliþtirilmiþ hafif ve yüksek performanslý bir mikro ORM (Object-Relational Mapper) kütüphanesidir.
- Dapper, ADO.NET'in üzerine inþa edilmiþtir ve veritabaný iþlemlerini daha kolay ve hýzlý bir þekilde gerçekleþtirmek için tasarlanmýþtýr.
- Dapper, SQL sorgularýný doðrudan yazmanýza olanak tanýr ve bu sorgularý nesnelere haritalar.
- Dapper, performans açýsýndan oldukça etkilidir çünkü ADO.NET'in saðladýðý düþük seviyeli veritabaný eriþim yeteneklerini kullanýr.
- Dapper, özellikle performansýn kritik olduðu durumlarda tercih edilir ve büyük veri setleriyle çalýþýrken bile hýzlý sonuçlar elde etmenizi saðlar.
- Avantajlarý:
	- Yüksek performans: Dapper, ADO.NET'in üzerine inþa edildiði için hýzlýdýr.
	- Basit kullaným: SQL sorgularýný doðrudan yazmanýza olanak tanýr.
	- Esneklik: Karmaþýk sorgularý kolayca yazabilirsiniz.
- Dezavantajlarý:
	- Otomatik þema yönetimi yoktur: Veritabaný þemasýný manuel olarak yönetmeniz gerekir.
	- Daha az özellik: Entity Framework gibi tam özellikli ORM'lere kýyasla daha az özellik sunar.	
- Örnek Kullaným:	
```csharp	
using Dapper;
using System.Data.SqlClient;
string connectionString = "your_connection_string";
using (var connection = new SqlConnection(connectionString))
{
	connection.Open();
	// Yeni ürün ekleme
	var insertQuery = "INSERT INTO Products (Name, Price) VALUES (@Name, @Price)";
	connection.Execute(insertQuery, new { Name = "Laptop", Price = 1500.00m });
	// Ürünleri listeleme
	var selectQuery = "SELECT * FROM Products";
	var products = connection.Query<Product>(selectQuery).ToList();
}
```	
